two independent branches
========================

firmware branch:
git init
git checkout --orphan msp430
git add .
git commit -m "empty version of firmware"
git remote add origin <url>
git push -u origin msp430

cd eagle directory
git init
git checkout --orphan eagle
git add .
git commit -m "initial version of eagle project"
git remote add origin <url>
git push -u origin eagle

cd delme_master branch
git init
echo use orphan branches only > no_commits_here.txt
git add .
git commit -m "blocker on master branch"
git remote add origin <url>
git push origin master


switch between branches:
git checkout msp430
git checkout eagle

Git tags
========
Create tag:
		git tag v2.0
		git tag -a v1.4 -m 'my version 1.4'
Show tags:
		git tag
push all tags to remote:
		git push origin --tags
push a single tag:
		git push origin <tag>

Remove local changes
====================
git checkout . // remove changes in tracked files only
git reset  // remove from index
git reset --hard // removes changes in tacked files only. New files - without changes
git clean -f // remove new files


Merge, rebase...
===============
git pull is just an alias for
$> git fetch && git merge origin/master

If you have local changes on your master that aren't reflected on origin, you might want
$> git rebase origin/master
to make sure your commits are 'on top'.

List of files
=============
ignored
--------
git ls-files --others -i --exclude-standard // from stack oveflow
git ls-files --others // my version. Works as well

tracked
-------
git ls-files

standard branches
=================
: show branches
git branch
: create branch
#git branch dev/igor/qqq
git checkout -b dev/igor/qqq
: list of files, modified on a branch
git diff --name-only master this_branch
:list of commits done on current branch
git log origin/master.. --oneline

collaborations
===============
: create patch from commit (on NPS##)
git format-patch -M origin/master
: apply patch on second (laptop)
git am <path to file>
: after pushing changes to github, on NPS
git stash ;git fetch; git merge --ff-only origin/master ; git stash pop


==================================================
find fork point:

diff -u \
 <(git rev-list --first-parent integration/p1_lab_3_0) \
 <(git rev-list --first-parent master) | \
 sed -ne 's/^ //p' | head -1

==================================================
List of conflicts after merge

git diff --name-only --diff-filter=U


